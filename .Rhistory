geom_col(fill = "#008E19") +
theme_minimal(base_size = 10) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_label(aes(label = sales_text)) +
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €")) +
labs(
title    = "Revenue by state",
x = "State",
y = "Revenue"
)
#### Sales by State and Year
## Manipulate
sales_by_state_and_year_tbl <- bike_orderlines_wrangled_tbl %>%
separate(col = location,
into = c('city', 'state'),
sep = ', ',
convert = T) %>%
mutate(year = year(order_date)) %>%
select(state, year, total_price) %>%
group_by(state, year)  %>%
summarize(sales = sum(total_price)) %>%
arrange(state, year) %>%
mutate(sales_text = scales::dollar(sales, big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €"))
## Visualize
plotti <- function(loc_city = "no city") {
eval(as.name(loc_city)) %>%
ggplot(aes(x = year, y = sales)) +
geom_col(fill = "#008E19") +
theme_minimal(base_size = 10) +
geom_label(aes(label = sales_text)) +
geom_smooth(method = "lm", se = FALSE) +
scale_y_continuous(labels =
scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €")) +
loc_city %>% rename_with(~tolower(gsub("_", " ")))
labs(title = paste("Revenue by year in ",
loc_city, sep=""),
x = "Year",
y = "Revenue")
}
for (jj in c(1:nrow(sales_by_state_tbl))) {
assign(
paste("sales_in_",
sales_by_state_tbl[jj,1],
sep = ''),
sales_by_state_and_year_tbl[sales_by_state_and_year_tbl$state == sales_by_state_tbl[[jj,1]],]
)
}
plotti(loc_city = "sales_in_Baden-Württemberg")
# Data Science at TUHH ------------------------------------------------------
# SALES ANALYSIS ----
# 1.0 Load libraries ----
library(tidyverse)
library(readxl)
library(lubridate)
# 2.0 Importing Files ----
bikes_tbl <- read_excel("00_data/01_bike_sales/01_raw_data/bikes.xlsx")
bikeshops_tbl <- read_excel("00_data/01_bike_sales/01_raw_data/bikeshops.xlsx")
orderlines_tbl <- read_excel("00_data/01_bike_sales/01_raw_data/orderlines.xlsx")
# 3.0 Examining Data ----
# 4.0 Joining Data ----
bike_orderlines_joined_tbl <- orderlines_tbl %>%
left_join(bikes_tbl, by = c("product.id" = "bike.id")) %>%
left_join(bikeshops_tbl, by = c("customer.id" = "bikeshop.id"))
# Wrangling Data
bike_orderlines_wrangled_tbl <- bike_orderlines_joined_tbl %>%
# 5.1 Separate category name
separate(col    = category,
into   = c("category.1", "category.2", "category.3"),
sep    = " - ") %>%
# 5.2 Add the total price (price * quantity)
mutate(total.price = price * quantity) %>%
# 5.3 Reorganize
select(-...1, -gender) %>%
select(-ends_with(".id")) %>%
bind_cols(bike_orderlines_joined_tbl %>% select(order.id)) %>%
select(order.id, contains("order"), contains("model"), contains("category"),
price, quantity, total.price,
everything()) %>%
rename(bikeshop = name) %>%
set_names(names(.) %>% str_replace_all("\\.", "_"))
####### Challenge
##### Sales by State
## Manipulate
sales_by_state_tbl <- bike_orderlines_wrangled_tbl %>%
separate(col = location,
into = c('city', 'state'),
sep = ', ',
convert = T) %>%
select(state, total_price) %>%
group_by(state)  %>%
summarize(sales = sum(total_price)) %>%
arrange(state) %>%
mutate(sales_text = scales::dollar(sales, big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €"))
## Visualize
sales_by_state_tbl %>%
arrange(sales) %>%
mutate(state = factor(state, levels = state)) %>%
ggplot(aes(x = state, y = sales)) +
geom_col(fill = "#008E19") +
theme_minimal(base_size = 10) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_label(aes(label = sales_text)) +
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €")) +
labs(
title    = "Revenue by state",
x = "State",
y = "Revenue"
)
#### Sales by State and Year
## Manipulate
sales_by_state_and_year_tbl <- bike_orderlines_wrangled_tbl %>%
separate(col = location,
into = c('city', 'state'),
sep = ', ',
convert = T) %>%
mutate(year = year(order_date)) %>%
select(state, year, total_price) %>%
group_by(state, year)  %>%
summarize(sales = sum(total_price)) %>%
arrange(state, year) %>%
mutate(sales_text = scales::dollar(sales, big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €"))
## Visualize
plotti <- function(loc_city = "no city") {
eval(as.name(loc_city)) %>%
ggplot(aes(x = year, y = sales)) +
geom_col(fill = "#008E19") +
theme_minimal(base_size = 10) +
geom_label(aes(label = sales_text)) +
geom_smooth(method = "lm", se = FALSE) +
scale_y_continuous(labels =
scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €")) +
a = loc_city
a %>% rename_with(~tolower(gsub("_", " ")))
labs(title = paste("Revenue by year in ",
a, sep=""),
x = "Year",
y = "Revenue")
}
for (jj in c(1:nrow(sales_by_state_tbl))) {
assign(
paste("sales_in_",
sales_by_state_tbl[jj,1],
sep = ''),
sales_by_state_and_year_tbl[sales_by_state_and_year_tbl$state == sales_by_state_tbl[[jj,1]],]
)
}
plotti(loc_city = "sales_in_Baden-Württemberg")
# Data Science at TUHH ------------------------------------------------------
# SALES ANALYSIS ----
# 1.0 Load libraries ----
library(tidyverse)
library(readxl)
library(lubridate)
# 2.0 Importing Files ----
bikes_tbl <- read_excel("00_data/01_bike_sales/01_raw_data/bikes.xlsx")
bikeshops_tbl <- read_excel("00_data/01_bike_sales/01_raw_data/bikeshops.xlsx")
orderlines_tbl <- read_excel("00_data/01_bike_sales/01_raw_data/orderlines.xlsx")
# 3.0 Examining Data ----
# 4.0 Joining Data ----
bike_orderlines_joined_tbl <- orderlines_tbl %>%
left_join(bikes_tbl, by = c("product.id" = "bike.id")) %>%
left_join(bikeshops_tbl, by = c("customer.id" = "bikeshop.id"))
# Wrangling Data
bike_orderlines_wrangled_tbl <- bike_orderlines_joined_tbl %>%
# 5.1 Separate category name
separate(col    = category,
into   = c("category.1", "category.2", "category.3"),
sep    = " - ") %>%
# 5.2 Add the total price (price * quantity)
mutate(total.price = price * quantity) %>%
# 5.3 Reorganize
select(-...1, -gender) %>%
select(-ends_with(".id")) %>%
bind_cols(bike_orderlines_joined_tbl %>% select(order.id)) %>%
select(order.id, contains("order"), contains("model"), contains("category"),
price, quantity, total.price,
everything()) %>%
rename(bikeshop = name) %>%
set_names(names(.) %>% str_replace_all("\\.", "_"))
####### Challenge
##### Sales by State
## Manipulate
sales_by_state_tbl <- bike_orderlines_wrangled_tbl %>%
separate(col = location,
into = c('city', 'state'),
sep = ', ',
convert = T) %>%
select(state, total_price) %>%
group_by(state)  %>%
summarize(sales = sum(total_price)) %>%
arrange(state) %>%
mutate(sales_text = scales::dollar(sales, big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €"))
## Visualize
sales_by_state_tbl %>%
arrange(sales) %>%
mutate(state = factor(state, levels = state)) %>%
ggplot(aes(x = state, y = sales)) +
geom_col(fill = "#008E19") +
theme_minimal(base_size = 10) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_label(aes(label = sales_text)) +
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €")) +
labs(
title    = "Revenue by state",
x = "State",
y = "Revenue"
)
#### Sales by State and Year
## Manipulate
sales_by_state_and_year_tbl <- bike_orderlines_wrangled_tbl %>%
separate(col = location,
into = c('city', 'state'),
sep = ', ',
convert = T) %>%
mutate(year = year(order_date)) %>%
select(state, year, total_price) %>%
group_by(state, year)  %>%
summarize(sales = sum(total_price)) %>%
arrange(state, year) %>%
mutate(sales_text = scales::dollar(sales, big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €"))
## Visualize
plotti <- function(loc_city = "no city") {
eval(as.name(loc_city)) %>%
ggplot(aes(x = year, y = sales)) +
geom_col(fill = "#008E19") +
theme_minimal(base_size = 10) +
geom_label(aes(label = sales_text)) +
geom_smooth(method = "lm", se = FALSE) +
scale_y_continuous(labels =
scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €")) +
labs(title = paste("Revenue by year in ",
loc_city, sep=""),
x = "Year",
y = "Revenue")
}
for (jj in c(1:nrow(sales_by_state_tbl))) {
assign(
paste("sales_in_",
sales_by_state_tbl[jj,1],
sep = ''),
sales_by_state_and_year_tbl[sales_by_state_and_year_tbl$state == sales_by_state_tbl[[jj,1]],]
)
}
plotti(loc_city = "sales_in_Baden-Württemberg")
plotti(loc_city = "sales_in_Bavaria")
plotti(loc_city = "sales_in_Berlin")
plotti(loc_city = "sales_in_Bremen")
plotti(loc_city = "sales_in_Hamburg")
plotti(loc_city = "sales_in_Hesse")
plotti(loc_city = "sales_in_Lower Saxony")
plotti(loc_city = "sales_in_Mecklenburg-Western Pomerania")
plotti(loc_city = "sales_in_North Rhine-Westphalia")
plotti(loc_city = "sales_in_Saxony")
plotti(loc_city = "sales_in_Saxony-Anhalt")
plotti(loc_city = "sales_in_Schleswig-Holstein")
## Sales by State - Visualize
sales_by_state_tbl %>%
arrange(sales) %>%
mutate(state = factor(state, levels = state)) %>%
ggplot(aes(x = state, y = sales)) +
geom_col(fill = "#008E19") +
theme_minimal(base_size = 25) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_label(aes(label = sales_text)) +
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €")) +
labs(
title    = "Revenue by state",
x = "State",
y = "Revenue"
)
## Sales by State - Visualize
sales_by_state_tbl %>%
arrange(sales) %>%
mutate(state = factor(state, levels = state)) %>%
ggplot(aes(x = state, y = sales)) +
geom_col(fill = "#008E19") +
theme_minimal(base_size = 25) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_label(aes(label = sales_text)) +
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €")) +
labs(
title    = "Revenue by state",
x = "State",
y = "Revenue"
)
## Sales by State - Visualize
sales_by_state_tbl %>%
arrange(sales) %>%
mutate(state = factor(state, levels = state)) %>%
ggplot(aes(x = state, y = sales)) +
geom_col(fill = "#008E19") +
theme_minimal(base_size = 25) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_label(aes(label = sales_text)) +
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €")) +
labs(
title    = "Revenue by state",
x = "State",
y = "Revenue"
)
## Sales by State - Visualize
sales_by_state_tbl %>%
arrange(sales) %>%
mutate(state = factor(state, levels = state)) %>%
ggplot(aes(x = state, y = sales)) +
geom_col(fill = "#008E19") +
theme_minimal(base_size = 25) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_label(aes(label = sales_text)) +
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €")) +
labs(
title    = "Revenue by state",
x = "State",
y = "Revenue"
)
## Sales by State - Visualize
sales_by_state_tbl %>%
arrange(sales) %>%
mutate(state = factor(state, levels = state)) %>%
ggplot(aes(x = state, y = sales)) +
geom_col(fill = "#008E19") +
theme_minimal(base_size = 13) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_label(aes(label = sales_text)) +
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €")) +
labs(
title    = "Revenue by state",
x = "State",
y = "Revenue"
)
## Sales by State - Visualize
sales_by_state_tbl %>%
arrange(sales) %>%
mutate(state = factor(state, levels = state)) %>%
ggplot(aes(x = state, y = sales)) +
geom_col(fill = "#008E19") +
theme_minimal(base_size = 15) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_label(aes(label = sales_text)) +
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €")) +
labs(
title    = "Revenue by state",
x = "State",
y = "Revenue"
)
## Sales by State - Visualize
sales_by_state_tbl %>%
arrange(sales) %>%
mutate(state = factor(state, levels = state)) %>%
ggplot(aes(x = state, y = sales)) +
geom_col(fill = "#008E19") +
theme_minimal(base_size = 15) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_label(aes(label = sales_text)) +
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €")) +
labs(
title    = "Revenue by state",
x = "State",
y = "Revenue"
)
## Sales by State and Year - Visualize
plotti(loc_data = "sales_in_Baden-Württemberg",
loc_city = "Baden-Württemberg")
## Sales by State - Visualize
sales_by_state_tbl %>%
arrange(sales) %>%
mutate(state = factor(state, levels = state)) %>%
ggplot(aes(x = state, y = sales)) +
geom_col(fill = "#008E19") +
theme_minimal(base_size = 20) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_label(aes(label = sales_text)) +
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €")) +
labs(
title    = "Revenue by state",
x = "State",
y = "Revenue"
)
## Sales by State and Year - Visualize
plotti(loc_data = "sales_in_Baden-Württemberg",
loc_city = "Baden-Württemberg")
# Step 0: Set password ----------------------------------------------------
##########################################################################
##### DON'T PUSH THIS SECTION TO GITHUB  - REMOVE THIS AFTER RUNNING #####
##########################################################################
# Sys.setenv(LAB_KEY = "Your-token")
# Step 1: Build Website ---------------------------------------------------
rmarkdown::render_site(encoding = 'UTF-8')
# Step 2: Encode Journal.html ---------------------------------------------
# Encrypt
##########################################################################
###### THIS WILL ONLY WORK IF YOU HAVE STATICRYPT INSTALLED VIA NPM ######
##########################################################################
system( paste0("staticrypt ./docs/journal.html ", Sys.getenv("LAB_KEY")) )
# Remove and rename resulting files
file.remove("./docs/journal.html")
file.rename(from = "./docs/journal_encrypted.html",
to   = "./docs/journal.html")
# Open local html file in your browser
browseURL("./docs/index.html")
# Step 0: Set password ----------------------------------------------------
##########################################################################
##### DON'T PUSH THIS SECTION TO GITHUB  - REMOVE THIS AFTER RUNNING #####
##########################################################################
# Sys.setenv(LAB_KEY = "Your-token")
# Step 1: Build Website ---------------------------------------------------
rmarkdown::render_site(encoding = 'UTF-8')
# Step 2: Encode Journal.html ---------------------------------------------
# Encrypt
##########################################################################
###### THIS WILL ONLY WORK IF YOU HAVE STATICRYPT INSTALLED VIA NPM ######
##########################################################################
system( paste0("staticrypt ./docs/journal.html ", Sys.getenv("LAB_KEY")) )
# Remove and rename resulting files
file.remove("./docs/journal.html")
file.rename(from = "./docs/journal_encrypted.html",
to   = "./docs/journal.html")
# Open local html file in your browser
browseURL("./docs/index.html")
source("build_website.R")
source("build_website.R")
source("build_website.R")
source("build_website.R")
Sys.getenv("LAB_KEY")
# Step 0: Set password ----------------------------------------------------
##########################################################################
##### DON'T PUSH THIS SECTION TO GITHUB  - REMOVE THIS AFTER RUNNING #####
##########################################################################
# Sys.setenv(LAB_KEY = "Your-token")
# Step 1: Build Website ---------------------------------------------------
rmarkdown::render_site(encoding = 'UTF-8')
# Step 2: Encode Journal.html ---------------------------------------------
# Encrypt
##########################################################################
###### THIS WILL ONLY WORK IF YOU HAVE STATICRYPT INSTALLED VIA NPM ######
##########################################################################
system( paste0("staticrypt ./docs/journal.html ", Sys.getenv("LAB_KEY")) )
# Remove and rename resulting files
file.remove("./docs/journal.html")
file.rename(from = "./docs/journal_encrypted.html",
to   = "./docs/journal.html")
# Open local html file in your browser
browseURL("./docs/index.html")
rmarkdown::render_site(encoding = 'UTF-8')
system( paste0("staticrypt ./docs/journal.html ", Sys.getenv("LAB_KEY")) )
system( paste0("staticrypt ./docs/journal.html ", Sys.getenv("LAB_KEY")) )
Sys.setenv(LAB_KEY = "Data1Science2For3Days")
rmarkdown::render_site(encoding = 'UTF-8')
setwd("~/R Studio Projects/DSB Repo Clone/ws20-business-data-science-basics---lab-journal-ManuelTUHH")
Sys.setenv(LAB_KEY = "Data1Science2For3Days")
source(build_website.R)
source("build_website.R")
npm install -g https://github.com/TUHHStartupEngineers/staticrypt
# Step 1: Build Website ---------------------------------------------------
rmarkdown::render_site(encoding = 'UTF-8')
